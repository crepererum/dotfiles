" general vim setup
set nocompatible
set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8
set lazyredraw
set mouse=a
set shell=/usr/bin/bash
set hidden

" neovim fixes
if has('nvim')
    runtime! python_setup.vim
else
    set ttyfast
    set t_Co=256
endif

" undo/redo history
set history=100
silent !mkdir ~/.vim/undo > /dev/null 2>&1
set undodir=~/.vim/undo
set undofile

" shift, tab, indent, backspace
set backspace=indent,eol,start
set autoindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" nicer up and down movement
map j gj
map k gk
map <UP> g<UP>
map <DOWN> g<DOWN>

" faster command line commands
nnoremap ! :!

" faster edit mode exit
inoremap <M-i> <ESC>

" split and navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
set splitbelow
set splitright

" better search
set incsearch
set ignorecase
set smartcase
set wrapscan

" look and feel
syntax enable
set number
set ruler
set showcmd
set list listchars=tab:→\ ,trail:·
set scrolloff=8
set sidescrolloff=10
set tabpagemax=32
set cursorline
set ttimeoutlen=0
set noerrorbells
set visualbell
set t_vb =

" bigger syntax scan range
autocmd BufEnter * :syntax sync minlines=500

" wildmenu
set wildmenu
set wildmode=list:longest,full

" folds
set foldmethod=syntax
set foldopen=block,hor,jump,mark,percent,quickfix,search,tag,undo
nmap <SPACE> za

" strip whitespaces @ safe
autocmd BufWritePre * :%s/\s\+$//e

" fix markdown editing
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" figure out the system Python for Neovim
if exists("$VIRTUAL_ENV")
    let g:python_host_prog=substitute(system("which -a python2 | head -n2 | tail -n1"), "\n", '', 'g')
    let g:python3_host_prog=substitute(system("which -a python3 | head -n2 | tail -n1"), "\n", '', 'g')
else
    let g:python_host_prog=substitute(system("which python2"), "\n", '', 'g')
    let g:python3_host_prog=substitute(system("which python3"), "\n", '', 'g')
endif

" clipboard
set clipboard=unnamed
function! MyPaste()
    set paste
    normal "+p
    set nopaste
endfunction
nmap <silent> <C-p> :call MyPaste()<CR>
imap <silent> <C-p> <ESC>:call MyPaste()<CR>a
vmap <C-c> "+y

" vim-plug
source ~/.vim/autoload/plug.vim
call plug#begin('~/.vim/plugged')
filetype off
Plug 'junegunn/vim-plug'

" restore_vim.vim
Plug 'vim-scripts/restore_view.vim'
let g:skipview_files = [
    \'.git/COMMIT_EDITMSG',
    \'.git/rebase-merge/git-rebase-todo'
    \]

" vimproc
" required for VimShell
Plug 'Shougo/vimproc'

" neocomplcache
" optional for VimShell
Plug 'Shougo/neocomplcache.vim'

" tomorrow theme
Plug 'chriskempson/base16-vim'
set rtp+=~/.vim/plugged/base16-vim
set background=dark
let base16colorspace=256
colorscheme base16-bright

" SudoRead and SudoWrite
Plug 'chrisbra/SudoEdit.vim'

" Pencil
Plug 'reedes/vim-pencil'

" YouCompleteMe
Plug 'Valloric/YouCompleteMe'
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_rust_src_path = '~/rust_src/src'
let g:ycm_add_preview_to_completeopt = 0
set completeopt-=preview

" airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
set laststatus=2
let g:airline_powerline_fonts = 1

" delimitMate
Plug 'Raimondi/delimitMate'
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

" neomake
" supersets: syntastic
Plug 'benekastah/neomake'
let g:neomake_javascript_enabled_makers = ['eslint']
autocmd! BufWritePost * Neomake

" PreserveNoEOL
" required by editorconfig to handle this specific rule
" Plug 'vim-scripts/PreserveNoEOL'

" editorconfig
Plug 'editorconfig/editorconfig-vim'
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
let g:EditorConfig_exec_path = '/usr/bin/editorconfig'

" VCS diffs
Plug 'mhinz/vim-signify'

" GIT commands
Plug 'tpope/vim-fugitive'
Plug 'rhysd/conflict-marker.vim'

" UltiSnips
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger="<c-j>"

" tcomment
Plug 'tomtom/tcomment_vim'

" VimShell
Plug 'Shougo/vimshell.vim'

" startify
Plug 'mhinz/vim-startify'
hi StartifyBracket ctermfg=240
hi StartifyFooter  ctermfg=111
hi StartifyHeader  ctermfg=203
hi StartifyNumber  ctermfg=215
hi StartifyPath    ctermfg=245
hi StartifySlash   ctermfg=240

" julia
Plug 'JuliaLang/julia-vim'
let g:julia_latex_to_unicode = 0

" rust
Plug 'rust-lang/rust.vim'

" numbertoggle
Plug 'jeffkreeftmeijer/vim-numbertoggle'

" CTRL-Space
" (but remap it to Ctrl-S)
Plug 'vim-ctrlspace/vim-ctrlspace'
nnoremap <silent><C-s> :CtrlSpace O<CR>

" Ag (the_silver_searcher)
Plug 'rking/ag.vim'

" EasyMotion
Plug 'Lokaltog/vim-easymotion'

" distraction-free writing
" goyo and limelight
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'
function! GoyoBefore()
    set nocursorline
    set wrap
    set linebreak
    set nolist
    set noshowmode
    set noshowcmd
    set scrolloff=999
    Limelight
endfunction

function! GoyoAfter()
    Limelight!
    set list
    set nolinebreak
    set nowrap
    set cursorline
    set showmode
    set showcmd
    set scrolloff=8
endfunction

let g:goyo_width = 120
let g:goyo_callbacks = [function('GoyoBefore'), function('GoyoAfter')]

" more text object
Plug 'vim-scripts/argtextobj.vim'
Plug 'bkad/CamelCaseMotion'
Plug 'michaeljsmith/vim-indent-object'

" expand region
Plug 'terryma/vim-expand-region'

" incremental search
Plug 'haya14busa/incsearch.vim'
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" floobits
Plug 'floobits/floobits-neovim'

" exchange
Plug 'tommcdo/vim-exchange'

" NrrwRgn
Plug 'chrisbra/NrrwRgn'

" better diff
Plug 'chrisbra/vim-diff-enhanced'

" sneak
Plug 'justinmk/vim-sneak'

" matchit
runtime! macros/matchit.vim

" spell check
autocmd BufWinEnter * let b:myLang=0
let g:myLangList=["nospell","de_de","en_us","es"]
function! ToggleSpell()
    let b:myLang=b:myLang+1
    if b:myLang>=len(g:myLangList) | let b:myLang=0 | endif
    if b:myLang==0
        setlocal nospell
    else
        execute "setlocal spell spelllang=".get(g:myLangList, b:myLang)
    endif
    echo "spell checking language:" g:myLangList[b:myLang]
endfunction
nmap <silent> <F7> :call ToggleSpell()<CR>
imap <silent> <F7> <ESC>:call ToggleSpell()<CR>a

" highlight overlong lines
" HINT: needs to go at the very bottom of the file
let &colorcolumn=join(range(121,999),",")

" activate filetype again
call plug#end()
filetype plugin indent on

