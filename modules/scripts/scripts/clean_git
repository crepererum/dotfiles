#!/usr/bin/env bash

set -euo pipefail

readonly git_path=$1

worktrees=$(git -C "$git_path" worktree list | sed -E 's/^([^ ]*).*$/\1/')

echo "delete unused worktrees..."
for w in $worktrees; do
    echo "  $w"
    if [[ -f "$w/.git" ]]; then
        echo "    => worktree"
        if [[ -z "$(git -C "$w" status --porcelain)" ]]; then
            echo "      => clean"
            local_branch="$(git -C "$w" rev-parse --abbrev-ref HEAD)"

            set +e
            remote_branch="$(git -C "$w" rev-parse --abbrev-ref --symbolic-full-name @{u} 2> /dev/null)"
            has_remote=$?
            set -e

            if [[ $has_remote == 0 ]]; then
                echo "        => w/ remote"
                if [[ "x$(git -C $w rev-parse $local_branch)" == "x$(git -C "$w" rev-parse "$remote_branch")" ]]; then
                    echo "          => in-sync"
                    echo "            => DELETE"
                    rm -rf "$w"
                else
                    echo "          => out-of-sync"
                fi
            else
                echo "        => local only"
            fi
        else
            echo "      => dirty"
        fi
    elif [[ -d "$w/.git" ]]; then
        echo "    => master copy"
    else
        echo "    => missing"
    fi
done
echo "done"

echo "worktree prune..."
git -C "$git_path" worktree prune
echo "done"

echo "prune remotes..."
for remote in $(git -C "$git_path" remote); do
    echo "  $remote"
    url="$(git -C "$git_path" remote get-url "$remote")"
    if [[ "$url" == /* ]]; then
        echo "    => path"
        if [[ -e "$url" ]]; then
            echo "      => exists"
        else
            echo "      => gone"
            git -C "$git_path" remote remove "$remote"
        fi
    else
        echo "    => remote, prune branches"
        git -C "$git_path" remote prune "$remote"
    fi
done
echo "done"

echo "gc --aggressive..."
git -C "$git_path" gc --aggressive
echo "done"

echo "fsck --full"
git -C "$git_path" fsck --full
echo "done"

echo "rebuild commit graph..."
git -C "$git_path" show-ref -s | git -C "$git_path" commit-graph write --stdin-commits
echo "done"
